"""
Flask project template generator for creating complete fullstack applications
"""
import os
import re
from typing import Dict, Tuple


def generate_flask_project(prompt: str) -> Dict[str, str]:
    """
    Generate a complete Flask project structure with all necessary files
    Returns a dictionary with file paths as keys and file contents as values
    """
    # Extract project details from prompt
    project_name = extract_project_name(prompt)
    app_type = extract_app_type(prompt)
    
    # Generate all project files
    files = {}
    
    # Main application file
    files['app.py'] = generate_app_py(project_name, app_type, prompt)
    
    # Configuration
    files['config.py'] = generate_config_py()
    
    # Database models
    files['models.py'] = generate_models_py(app_type, prompt)
    
    # Forms
    files['forms.py'] = generate_forms_py(app_type, prompt)
    
    # Routes/Views
    files['routes.py'] = generate_routes_py(app_type, prompt)
    
    # Templates
    files['templates/base.html'] = generate_base_template(project_name)
    files['templates/index.html'] = generate_index_template(project_name, app_type, prompt)
    files['templates/auth/login.html'] = generate_login_template()
    files['templates/auth/register.html'] = generate_register_template()
    files['templates/dashboard.html'] = generate_dashboard_template(app_type)
    
    # Static files
    files['static/css/style.css'] = generate_main_css(app_type)
    files['static/js/main.js'] = generate_main_js()
    
    # API routes
    files['api.py'] = generate_api_routes(app_type, prompt)
    
    # Database initialization
    files['init_db.py'] = generate_init_db()
    
    # Requirements
    files['requirements.txt'] = generate_requirements()
    
    # Environment configuration
    files['.env.example'] = generate_env_example()
    
    # Run script
    files['run.py'] = generate_run_script()
    
    # README with setup instructions
    files['README.md'] = generate_readme(project_name, app_type)
    
    return files


def extract_project_name(prompt: str) -> str:
    """Extract project name from prompt or generate default"""
    patterns = [
        r'(?:for|called|named)\s+["\']([^"\']+)["\']',
        r'(?:for|called|named)\s+([A-Z][a-zA-Z\s&]+?)(?:\s+(?:with|that|app)|[.,]|$)',
        r'(?:build|create|make)\s+(?:a|an)?\s*([A-Z][a-zA-Z\s]+?)(?:\s+(?:app|application|website))',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, prompt, re.IGNORECASE)
        if match:
            name = match.group(1).strip()
            if 3 <= len(name) <= 30:
                return name
    
    # Default names based on content
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['ecommerce', 'shop', 'store']):
        return "E-Commerce Store"
    elif any(word in prompt_lower for word in ['blog', 'news', 'article']):
        return "Blog Platform"
    elif any(word in prompt_lower for word in ['task', 'todo', 'project']):
        return "Task Manager"
    elif any(word in prompt_lower for word in ['chat', 'message', 'social']):
        return "Social Platform"
    else:
        return "Flask Application"


def extract_app_type(prompt: str) -> str:
    """Extract application type from prompt"""
    prompt_lower = prompt.lower()
    
    app_types = {
        'ecommerce': ['shop', 'store', 'ecommerce', 'commerce', 'product', 'cart'],
        'blog': ['blog', 'news', 'article', 'post', 'content'],
        'task_manager': ['task', 'todo', 'project', 'manage', 'organize'],
        'social': ['chat', 'message', 'social', 'friend', 'community'],
        'crm': ['customer', 'crm', 'client', 'contact', 'lead'],
        'portfolio': ['portfolio', 'showcase', 'gallery', 'work'],
        'dashboard': ['dashboard', 'analytics', 'admin', 'panel'],
    }
    
    for app_type, keywords in app_types.items():
        if any(keyword in prompt_lower for keyword in keywords):
            return app_type
    
    return 'general'


def generate_app_py(project_name: str, app_type: str, prompt: str) -> str:
    """Generate main Flask application file"""
    return f'''#!/usr/bin/env python3
"""
{project_name} - Flask Application
Generated by AI Website Generator
"""
from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os
from config import Config

# Initialize Flask app
app = Flask(__name__)
app.config.from_object(Config)

# Initialize extensions
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'auth.login'

# Import models and routes after app initialization
from models import User, {get_main_model_class(app_type)}
from routes import main_bp
from api import api_bp

# Register blueprints
app.register_blueprint(main_bp)
app.register_blueprint(api_bp, url_prefix='/api')

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def index():
    """Home page"""
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """User registration"""
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        
        # Check if user exists
        if User.query.filter_by(username=username).first():
            flash('Username already exists', 'error')
            return render_template('auth/register.html')
        
        if User.query.filter_by(email=email).first():
            flash('Email already registered', 'error')
            return render_template('auth/register.html')
        
        # Create new user
        user = User(
            username=username,
            email=email,
            password_hash=generate_password_hash(password)
        )
        db.session.add(user)
        db.session.commit()
        
        login_user(user)
        flash('Registration successful!', 'success')
        return redirect(url_for('dashboard'))
    
    return render_template('auth/register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """User login"""
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        
        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid credentials', 'error')
    
    return render_template('auth/login.html')

@app.route('/logout')
@login_required
def logout():
    """User logout"""
    logout_user()
    flash('Logged out successfully', 'info')
    return redirect(url_for('index'))

@app.route('/dashboard')
@login_required
def dashboard():
    """User dashboard"""
    {get_dashboard_logic(app_type)}
    return render_template('dashboard.html', **context)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
'''


def generate_config_py() -> str:
    """Generate Flask configuration file"""
    return '''import os
from datetime import timedelta

class Config:
    """Flask application configuration"""
    
    # Basic Flask config
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    
    # Database configuration
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///app.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Session configuration
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    
    # File upload configuration
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size
    UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'uploads')
    
    # Email configuration (for production)
    MAIL_SERVER = os.environ.get('MAIL_SERVER')
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    
    # Security headers
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = 3600

class DevelopmentConfig(Config):
    """Development configuration"""
    DEBUG = True

class ProductionConfig(Config):
    """Production configuration"""
    DEBUG = False

# Configuration mapping
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}
'''


def generate_models_py(app_type: str, prompt: str) -> str:
    """Generate database models"""
    main_model = get_models_for_type(app_type)
    
    return f'''from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime
from app import db

class User(UserMixin, db.Model):
    """User model for authentication"""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_admin = db.Column(db.Boolean, default=False)
    
    def __repr__(self):
        return f'<User {{self.username}}>'

{main_model}
'''


def get_models_for_type(app_type: str) -> str:
    """Get specific models based on application type"""
    models = {
        'ecommerce': '''
class Category(db.Model):
    """Product category model"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    description = db.Column(db.Text)
    products = db.relationship('Product', backref='category', lazy=True)

class Product(db.Model):
    """Product model for e-commerce"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text)
    price = db.Column(db.Float, nullable=False)
    stock = db.Column(db.Integer, default=0)
    image_url = db.Column(db.String(255))
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<Product {self.name}>'

class CartItem(db.Model):
    """Shopping cart item"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, default=1)
    added_at = db.Column(db.DateTime, default=datetime.utcnow)
''',
        'blog': '''
class Post(db.Model):
    """Blog post model"""
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120), nullable=False)
    content = db.Column(db.Text, nullable=False)
    summary = db.Column(db.String(255))
    author_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    published = db.Column(db.Boolean, default=True)
    
    author = db.relationship('User', backref='posts')
    
    def __repr__(self):
        return f'<Post {self.title}>'

class Comment(db.Model):
    """Comment model for blog posts"""
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    author_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    post_id = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    author = db.relationship('User', backref='comments')
    post = db.relationship('Post', backref='comments')
''',
        'task_manager': '''
class Project(db.Model):
    """Project model"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text)
    owner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    owner = db.relationship('User', backref='projects')
    
class Task(db.Model):
    """Task model"""
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text)
    status = db.Column(db.String(20), default='pending')  # pending, in_progress, completed
    priority = db.Column(db.String(10), default='medium')  # low, medium, high
    assigned_to_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    due_date = db.Column(db.DateTime)
    
    assigned_to = db.relationship('User', backref='tasks')
    project = db.relationship('Project', backref='tasks')
''',
        'general': '''
class Item(db.Model):
    """General item model"""
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    status = db.Column(db.String(20), default='active')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    user = db.relationship('User', backref='items')
    
    def __repr__(self):
        return f'<Item {self.title}>'
'''
    }
    
    return models.get(app_type, models['general'])


def get_main_model_class(app_type: str) -> str:
    """Get the main model class name for import"""
    model_classes = {
        'ecommerce': 'Product, Category, CartItem',
        'blog': 'Post, Comment',
        'task_manager': 'Project, Task',
        'general': 'Item'
    }
    return model_classes.get(app_type, 'Item')


def generate_forms_py(app_type: str, prompt: str) -> str:
    """Generate WTForms for the application"""
    return f'''from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, PasswordField, SelectField, FloatField, IntegerField
from wtforms.validators import DataRequired, Email, Length, NumberRange

class LoginForm(FlaskForm):
    """Login form"""
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])

class RegisterForm(FlaskForm):
    """Registration form"""
    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])

{get_forms_for_type(app_type)}
'''


def get_forms_for_type(app_type: str) -> str:
    """Get specific forms based on application type"""
    forms = {
        'ecommerce': '''
class ProductForm(FlaskForm):
    """Product creation/edit form"""
    name = StringField('Product Name', validators=[DataRequired(), Length(max=120)])
    description = TextAreaField('Description')
    price = FloatField('Price', validators=[DataRequired(), NumberRange(min=0)])
    stock = IntegerField('Stock', validators=[NumberRange(min=0)])
    category_id = SelectField('Category', coerce=int)

class CategoryForm(FlaskForm):
    """Category form"""
    name = StringField('Category Name', validators=[DataRequired(), Length(max=80)])
    description = TextAreaField('Description')
''',
        'blog': '''
class PostForm(FlaskForm):
    """Blog post form"""
    title = StringField('Title', validators=[DataRequired(), Length(max=120)])
    content = TextAreaField('Content', validators=[DataRequired()])
    summary = StringField('Summary', validators=[Length(max=255)])

class CommentForm(FlaskForm):
    """Comment form"""
    content = TextAreaField('Comment', validators=[DataRequired()])
''',
        'task_manager': '''
class TaskForm(FlaskForm):
    """Task creation form"""
    title = StringField('Task Title', validators=[DataRequired(), Length(max=120)])
    description = TextAreaField('Description')
    status = SelectField('Status', choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')])
    priority = SelectField('Priority', choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')])

class ProjectForm(FlaskForm):
    """Project form"""
    name = StringField('Project Name', validators=[DataRequired(), Length(max=120)])
    description = TextAreaField('Description')
''',
        'general': '''
class ItemForm(FlaskForm):
    """General item form"""
    title = StringField('Title', validators=[DataRequired(), Length(max=120)])
    description = TextAreaField('Description')
    status = SelectField('Status', choices=[('active', 'Active'), ('inactive', 'Inactive')])
'''
    }
    
    return forms.get(app_type, forms['general'])


def generate_routes_py(app_type: str, prompt: str) -> str:
    """Generate Flask routes/blueprint"""
    return f'''from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from models import db, {get_main_model_class(app_type)}
from forms import {get_form_classes_for_type(app_type)}

main_bp = Blueprint('main', __name__)

{get_routes_for_type(app_type)}
'''


def get_form_classes_for_type(app_type: str) -> str:
    """Get form class names for import"""
    form_classes = {
        'ecommerce': 'ProductForm, CategoryForm',
        'blog': 'PostForm, CommentForm',
        'task_manager': 'TaskForm, ProjectForm',
        'general': 'ItemForm'
    }
    return form_classes.get(app_type, 'ItemForm')


def get_routes_for_type(app_type: str) -> str:
    """Get specific routes based on application type"""
    routes = {
        'ecommerce': '''
@main_bp.route('/products')
def products():
    """List all products"""
    products = Product.query.all()
    categories = Category.query.all()
    return render_template('products.html', products=products, categories=categories)

@main_bp.route('/products/<int:id>')
def product_detail(id):
    """Product detail page"""
    product = Product.query.get_or_404(id)
    return render_template('product_detail.html', product=product)

@main_bp.route('/admin/products', methods=['GET', 'POST'])
@login_required
def manage_products():
    """Manage products (admin only)"""
    if not current_user.is_admin:
        flash('Access denied', 'error')
        return redirect(url_for('main.products'))
    
    form = ProductForm()
    if form.validate_on_submit():
        product = Product(
            name=form.name.data,
            description=form.description.data,
            price=form.price.data,
            stock=form.stock.data,
            category_id=form.category_id.data
        )
        db.session.add(product)
        db.session.commit()
        flash('Product added successfully!', 'success')
        return redirect(url_for('main.manage_products'))
    
    products = Product.query.all()
    return render_template('admin/products.html', form=form, products=products)

@main_bp.route('/cart')
@login_required
def view_cart():
    """View shopping cart"""
    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    return render_template('cart.html', cart_items=cart_items)
''',
        'blog': '''
@main_bp.route('/posts')
def posts():
    """List all blog posts"""
    posts = Post.query.filter_by(published=True).order_by(Post.created_at.desc()).all()
    return render_template('posts.html', posts=posts)

@main_bp.route('/posts/<int:id>')
def post_detail(id):
    """Blog post detail"""
    post = Post.query.get_or_404(id)
    comments = Comment.query.filter_by(post_id=id).all()
    form = CommentForm()
    return render_template('post_detail.html', post=post, comments=comments, form=form)

@main_bp.route('/create_post', methods=['GET', 'POST'])
@login_required
def create_post():
    """Create new blog post"""
    form = PostForm()
    if form.validate_on_submit():
        post = Post(
            title=form.title.data,
            content=form.content.data,
            summary=form.summary.data,
            author_id=current_user.id
        )
        db.session.add(post)
        db.session.commit()
        flash('Post created successfully!', 'success')
        return redirect(url_for('main.posts'))
    
    return render_template('create_post.html', form=form)
''',
        'task_manager': '''
@main_bp.route('/tasks')
@login_required
def tasks():
    """List user tasks"""
    tasks = Task.query.filter_by(assigned_to_id=current_user.id).all()
    return render_template('tasks.html', tasks=tasks)

@main_bp.route('/create_task', methods=['GET', 'POST'])
@login_required
def create_task():
    """Create new task"""
    form = TaskForm()
    if form.validate_on_submit():
        task = Task(
            title=form.title.data,
            description=form.description.data,
            status=form.status.data,
            priority=form.priority.data,
            assigned_to_id=current_user.id
        )
        db.session.add(task)
        db.session.commit()
        flash('Task created successfully!', 'success')
        return redirect(url_for('main.tasks'))
    
    return render_template('create_task.html', form=form)

@main_bp.route('/projects')
@login_required
def projects():
    """List user projects"""
    projects = Project.query.filter_by(owner_id=current_user.id).all()
    return render_template('projects.html', projects=projects)
''',
        'general': '''
@main_bp.route('/items')
@login_required
def items():
    """List user items"""
    items = Item.query.filter_by(user_id=current_user.id).all()
    return render_template('items.html', items=items)

@main_bp.route('/create_item', methods=['GET', 'POST'])
@login_required
def create_item():
    """Create new item"""
    form = ItemForm()
    if form.validate_on_submit():
        item = Item(
            title=form.title.data,
            description=form.description.data,
            status=form.status.data,
            user_id=current_user.id
        )
        db.session.add(item)
        db.session.commit()
        flash('Item created successfully!', 'success')
        return redirect(url_for('main.items'))
    
    return render_template('create_item.html', form=form)
'''
    }
    
    return routes.get(app_type, routes['general'])


def get_dashboard_logic(app_type: str) -> str:
    """Get dashboard logic based on application type"""
    logic = {
        'ecommerce': '''
    total_products = Product.query.count()
    recent_orders = CartItem.query.filter_by(user_id=current_user.id).limit(5).all()
    context = {
        'total_products': total_products,
        'recent_orders': recent_orders,
        'user': current_user
    }''',
        'blog': '''
    user_posts = Post.query.filter_by(author_id=current_user.id).count()
    recent_posts = Post.query.filter_by(author_id=current_user.id).order_by(Post.created_at.desc()).limit(5).all()
    context = {
        'user_posts': user_posts,
        'recent_posts': recent_posts,
        'user': current_user
    }''',
        'task_manager': '''
    total_tasks = Task.query.filter_by(assigned_to_id=current_user.id).count()
    pending_tasks = Task.query.filter_by(assigned_to_id=current_user.id, status='pending').count()
    recent_tasks = Task.query.filter_by(assigned_to_id=current_user.id).order_by(Task.created_at.desc()).limit(5).all()
    context = {
        'total_tasks': total_tasks,
        'pending_tasks': pending_tasks,
        'recent_tasks': recent_tasks,
        'user': current_user
    }''',
        'general': '''
    total_items = Item.query.filter_by(user_id=current_user.id).count()
    recent_items = Item.query.filter_by(user_id=current_user.id).order_by(Item.created_at.desc()).limit(5).all()
    context = {
        'total_items': total_items,
        'recent_items': recent_items,
        'user': current_user
    }'''
    }
    
    return logic.get(app_type, logic['general'])


def generate_base_template(project_name: str) -> str:
    """Generate base HTML template"""
    return f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{{{ title or '{project_name}' }}}}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{{{ url_for('static', filename='css/style.css') }}}}">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{{{ url_for('index') }}}}">
                <i class="fas fa-rocket me-2"></i>{project_name}
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{{{ url_for('index') }}}}">Home</a>
                    </li>
                    {{% if current_user.is_authenticated %}}
                        <li class="nav-item">
                            <a class="nav-link" href="{{{{ url_for('dashboard') }}}}">Dashboard</a>
                        </li>
                    {{% endif %}}
                </ul>
                
                <ul class="navbar-nav">
                    {{% if current_user.is_authenticated %}}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user me-1"></i>{{{{ current_user.username }}}}
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="{{{{ url_for('dashboard') }}}}">Dashboard</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="{{{{ url_for('logout') }}}}">Logout</a></li>
                            </ul>
                        </li>
                    {{% else %}}
                        <li class="nav-item">
                            <a class="nav-link" href="{{{{ url_for('login') }}}}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{{{ url_for('register') }}}}">Register</a>
                        </li>
                    {{% endif %}}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    <div class="container mt-3">
        {{% with messages = get_flashed_messages(with_categories=true) %}}
            {{% if messages %}}
                {{% for category, message in messages %}}
                    <div class="alert alert-{{{{ 'danger' if category == 'error' else category }}}} alert-dismissible fade show" role="alert">
                        {{{{ message }}}}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {{% endfor %}}
            {{% endif %}}
        {{% endwith %}}
    </div>

    <!-- Main Content -->
    <main class="container my-4">
        {{% block content %}}{{% endblock %}}
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-light py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h5>{project_name}</h5>
                    <p>Generated by AI Website Generator</p>
                </div>
                <div class="col-md-6 text-end">
                    <p>&copy; 2025 {project_name}. All rights reserved.</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script src="{{{{ url_for('static', filename='js/main.js') }}}}"></script>
    {{% block scripts %}}{{% endblock %}}
</body>
</html>'''


def generate_index_template(project_name: str, app_type: str, prompt: str) -> str:
    """Generate index/home template"""
    return f'''
{{% extends "base.html" %}}
{{% block content %}}

<!-- Hero Section -->
<div class="hero-section bg-gradient text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="display-4 fw-bold mb-3">Welcome to {project_name}</h1>
                <p class="lead mb-4">{get_hero_description(app_type, prompt)}</p>
                <div class="d-flex gap-3">
                    {{% if not current_user.is_authenticated %}}
                        <a href="{{{{ url_for('register') }}}}" class="btn btn-light btn-lg">
                            <i class="fas fa-user-plus me-2"></i>Get Started
                        </a>
                        <a href="{{{{ url_for('login') }}}}" class="btn btn-outline-light btn-lg">
                            <i class="fas fa-sign-in-alt me-2"></i>Login
                        </a>
                    {{% else %}}
                        <a href="{{{{ url_for('dashboard') }}}}" class="btn btn-light btn-lg">
                            <i class="fas fa-tachometer-alt me-2"></i>Go to Dashboard
                        </a>
                    {{% endif %}}
                </div>
            </div>
            <div class="col-lg-6">
                <div class="text-center">
                    <i class="fas {get_hero_icon(app_type)} fa-8x opacity-75"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Features Section -->
<div class="container mb-5">
    <h2 class="text-center mb-5">Key Features</h2>
    <div class="row g-4">
        {get_feature_cards(app_type)}
    </div>
</div>

<!-- CTA Section -->
<div class="bg-light py-5">
    <div class="container text-center">
        <h3 class="mb-3">Ready to Get Started?</h3>
        <p class="lead mb-4">Join thousands of users who are already using {project_name}</p>
        {{% if not current_user.is_authenticated %}}
            <a href="{{{{ url_for('register') }}}}" class="btn btn-primary btn-lg">
                <i class="fas fa-rocket me-2"></i>Start Now - It's Free!
            </a>
        {{% endif %}}
    </div>
</div>

{{% endblock %}}
'''


def get_hero_description(app_type: str, prompt: str) -> str:
    """Get hero section description based on app type"""
    descriptions = {
        'ecommerce': 'Discover amazing products and shop with confidence. Browse our extensive catalog and enjoy seamless shopping experience.',
        'blog': 'Share your thoughts and connect with readers. Create engaging content and build your community.',
        'task_manager': 'Organize your work and boost productivity. Manage tasks, track progress, and collaborate effectively.',
        'social': 'Connect with friends and share your moments. Build meaningful relationships in our community.',
        'general': 'Experience the power of modern web applications. Built with Flask and designed for performance.'
    }
    return descriptions.get(app_type, descriptions['general'])


def get_hero_icon(app_type: str) -> str:
    """Get hero icon based on app type"""
    icons = {
        'ecommerce': 'fa-shopping-cart',
        'blog': 'fa-blog',
        'task_manager': 'fa-tasks',
        'social': 'fa-users',
        'general': 'fa-cog'
    }
    return icons.get(app_type, icons['general'])


def get_feature_cards(app_type: str) -> str:
    """Get feature cards based on app type"""
    features = {
        'ecommerce': '''
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-store fa-3x text-primary mb-3"></i>
                    <h5 class="card-title">Product Catalog</h5>
                    <p class="card-text">Browse and manage your product inventory with ease</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-shopping-cart fa-3x text-success mb-3"></i>
                    <h5 class="card-title">Shopping Cart</h5>
                    <p class="card-text">Seamless shopping experience with secure checkout</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-chart-bar fa-3x text-info mb-3"></i>
                    <h5 class="card-title">Analytics</h5>
                    <p class="card-text">Track sales and customer behavior insights</p>
                </div>
            </div>
        </div>''',
        'blog': '''
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-pen-fancy fa-3x text-primary mb-3"></i>
                    <h5 class="card-title">Rich Editor</h5>
                    <p class="card-text">Create beautiful posts with our intuitive editor</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-comments fa-3x text-success mb-3"></i>
                    <h5 class="card-title">Comments</h5>
                    <p class="card-text">Engage with your readers through comments</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-share-alt fa-3x text-info mb-3"></i>
                    <h5 class="card-title">Social Sharing</h5>
                    <p class="card-text">Share your content across social platforms</p>
                </div>
            </div>
        </div>''',
        'task_manager': '''
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-tasks fa-3x text-primary mb-3"></i>
                    <h5 class="card-title">Task Management</h5>
                    <p class="card-text">Create, assign, and track tasks efficiently</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-project-diagram fa-3x text-success mb-3"></i>
                    <h5 class="card-title">Project Planning</h5>
                    <p class="card-text">Organize work into projects and milestones</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-clock fa-3x text-info mb-3"></i>
                    <h5 class="card-title">Time Tracking</h5>
                    <p class="card-text">Monitor time spent on tasks and projects</p>
                </div>
            </div>
        </div>''',
        'general': '''
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-rocket fa-3x text-primary mb-3"></i>
                    <h5 class="card-title">Fast & Modern</h5>
                    <p class="card-text">Built with latest technologies for optimal performance</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-shield-alt fa-3x text-success mb-3"></i>
                    <h5 class="card-title">Secure</h5>
                    <p class="card-text">Your data is protected with industry-standard security</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card h-100 text-center">
                <div class="card-body">
                    <i class="fas fa-mobile-alt fa-3x text-info mb-3"></i>
                    <h5 class="card-title">Responsive</h5>
                    <p class="card-text">Works perfectly on all devices and screen sizes</p>
                </div>
            </div>
        </div>'''
    }
    return features.get(app_type, features['general'])


def generate_login_template() -> str:
    """Generate login template"""
    return '''{{% extends "base.html" %}}
{{% block content %}}

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white text-center">
                <h4><i class="fas fa-sign-in-alt me-2"></i>Login</h4>
            </div>
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt me-2"></i>Login
                        </button>
                    </div>
                </form>
            </div>
            <div class="card-footer text-center">
                <p class="mb-0">Don't have an account? <a href="{{{{ url_for('register') }}}}">Register here</a></p>
            </div>
        </div>
    </div>
</div>

{{% endblock %}}'''


def generate_register_template() -> str:
    """Generate registration template"""
    return '''{{% extends "base.html" %}}
{{% block content %}}

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-success text-white text-center">
                <h4><i class="fas fa-user-plus me-2"></i>Register</h4>
            </div>
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-user-plus me-2"></i>Register
                        </button>
                    </div>
                </form>
            </div>
            <div class="card-footer text-center">
                <p class="mb-0">Already have an account? <a href="{{{{ url_for('login') }}}}">Login here</a></p>
            </div>
        </div>
    </div>
</div>

{{% endblock %}}'''


def generate_dashboard_template(app_type: str) -> str:
    """Generate dashboard template"""
    return f'''{{% extends "base.html" %}}
{{% block content %}}

<div class="row mb-4">
    <div class="col">
        <h1>Dashboard</h1>
        <p class="lead">Welcome back, {{{{ current_user.username }}}}!</p>
    </div>
</div>

{get_dashboard_content(app_type)}

{{% endblock %}}'''


def get_dashboard_content(app_type: str) -> str:
    """Get dashboard content based on app type"""
    content = {
        'ecommerce': '''
<!-- Stats Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-4">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ total_products }}</h4>
                        <p class="mb-0">Total Products</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-box fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ recent_orders|length }}</h4>
                        <p class="mb-0">Recent Orders</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-shopping-cart fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>$0</h4>
                        <p class="mb-0">Revenue</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-dollar-sign fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="row mb-4">
    <div class="col">
        <div class="card">
            <div class="card-header">
                <h5>Quick Actions</h5>
            </div>
            <div class="card-body">
                <a href="/products" class="btn btn-primary me-2">
                    <i class="fas fa-eye me-1"></i>View Products
                </a>
                <a href="/admin/products" class="btn btn-success me-2">
                    <i class="fas fa-plus me-1"></i>Add Product
                </a>
                <a href="/cart" class="btn btn-info">
                    <i class="fas fa-shopping-cart me-1"></i>View Cart
                </a>
            </div>
        </div>
    </div>
</div>''',
        'blog': '''
<!-- Stats Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-6">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ user_posts }}</h4>
                        <p class="mb-0">Your Posts</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-blog fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>0</h4>
                        <p class="mb-0">Total Views</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-eye fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Posts -->
<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Recent Posts</h5>
                <a href="/create_post" class="btn btn-primary btn-sm">
                    <i class="fas fa-plus me-1"></i>New Post
                </a>
            </div>
            <div class="card-body">
                {% if recent_posts %}
                    {% for post in recent_posts %}
                        <div class="mb-3 p-3 border rounded">
                            <h6>{{ post.title }}</h6>
                            <small class="text-muted">{{ post.created_at.strftime('%Y-%m-%d %H:%M') }}</small>
                            <p class="mb-0 mt-2">{{ post.summary or post.content[:100] }}...</p>
                        </div>
                    {% endfor %}
                {% else %}
                    <p>No posts yet. <a href="/create_post">Create your first post!</a></p>
                {% endif %}
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Quick Actions</h5>
            </div>
            <div class="card-body">
                <a href="/create_post" class="btn btn-primary w-100 mb-2">
                    <i class="fas fa-plus me-1"></i>Write New Post
                </a>
                <a href="/posts" class="btn btn-outline-primary w-100">
                    <i class="fas fa-list me-1"></i>All Posts
                </a>
            </div>
        </div>
    </div>
</div>''',
        'task_manager': '''
<!-- Stats Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-4">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ total_tasks }}</h4>
                        <p class="mb-0">Total Tasks</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-tasks fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ pending_tasks }}</h4>
                        <p class="mb-0">Pending Tasks</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-clock fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ total_tasks - pending_tasks }}</h4>
                        <p class="mb-0">Completed</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-check fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Tasks -->
<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Recent Tasks</h5>
                <a href="/create_task" class="btn btn-primary btn-sm">
                    <i class="fas fa-plus me-1"></i>New Task
                </a>
            </div>
            <div class="card-body">
                {% if recent_tasks %}
                    {% for task in recent_tasks %}
                        <div class="mb-3 p-3 border rounded">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6>{{ task.title }}</h6>
                                    <small class="text-muted">{{ task.created_at.strftime('%Y-%m-%d') }}</small>
                                </div>
                                <span class="badge bg-{{ 'warning' if task.status == 'pending' else 'info' if task.status == 'in_progress' else 'success' }}">
                                    {{ task.status.title() }}
                                </span>
                            </div>
                            {% if task.description %}
                                <p class="mb-0 mt-2">{{ task.description[:100] }}...</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                {% else %}
                    <p>No tasks yet. <a href="/create_task">Create your first task!</a></p>
                {% endif %}
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Quick Actions</h5>
            </div>
            <div class="card-body">
                <a href="/create_task" class="btn btn-primary w-100 mb-2">
                    <i class="fas fa-plus me-1"></i>New Task
                </a>
                <a href="/tasks" class="btn btn-outline-primary w-100 mb-2">
                    <i class="fas fa-list me-1"></i>All Tasks
                </a>
                <a href="/projects" class="btn btn-outline-secondary w-100">
                    <i class="fas fa-project-diagram me-1"></i>Projects
                </a>
            </div>
        </div>
    </div>
</div>''',
        'general': '''
<!-- Stats Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-6">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ total_items }}</h4>
                        <p class="mb-0">Total Items</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-list fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>{{ user.username|length }}</h4>
                        <p class="mb-0">Profile Score</p>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-user fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Items -->
<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Recent Items</h5>
                <a href="/create_item" class="btn btn-primary btn-sm">
                    <i class="fas fa-plus me-1"></i>New Item
                </a>
            </div>
            <div class="card-body">
                {% if recent_items %}
                    {% for item in recent_items %}
                        <div class="mb-3 p-3 border rounded">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h6>{{ item.title }}</h6>
                                    <small class="text-muted">{{ item.created_at.strftime('%Y-%m-%d') }}</small>
                                </div>
                                <span class="badge bg-{{ 'success' if item.status == 'active' else 'secondary' }}">
                                    {{ item.status.title() }}
                                </span>
                            </div>
                            {% if item.description %}
                                <p class="mb-0 mt-2">{{ item.description[:100] }}...</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                {% else %}
                    <p>No items yet. <a href="/create_item">Create your first item!</a></p>
                {% endif %}
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Quick Actions</h5>
            </div>
            <div class="card-body">
                <a href="/create_item" class="btn btn-primary w-100 mb-2">
                    <i class="fas fa-plus me-1"></i>New Item
                </a>
                <a href="/items" class="btn btn-outline-primary w-100">
                    <i class="fas fa-list me-1"></i>All Items
                </a>
            </div>
        </div>
    </div>
</div>'''
    }
    return content.get(app_type, content['general'])


def generate_main_css(app_type: str) -> str:
    """Generate main CSS file"""
    return f''':root {{
    --primary-color: #0066cc;
    --secondary-color: #6c757d;
    --success-color: #28a745;
    --danger-color: #dc3545;
    --warning-color: #ffc107;
    --info-color: #17a2b8;
    --light-color: #f8f9fa;
    --dark-color: #343a40;
}}

body {{
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
}}

/* Hero Section */
.hero-section {{
    background: linear-gradient(135deg, var(--primary-color) 0%, #004a99 100%);
    position: relative;
    overflow: hidden;
}}

.hero-section::before {{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 20"><defs><pattern id="grain" width="100" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grain)"/></svg>') repeat;
    pointer-events: none;
}}

/* Cards */
.card {{
    border: none;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
}}

.card:hover {{
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
}}

/* Buttons */
.btn {{
    border-radius: 8px;
    font-weight: 500;
    padding: 0.5rem 1.5rem;
    transition: all 0.3s ease;
}}

.btn:hover {{
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}}

/* Navigation */
.navbar {{
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}}

.navbar-brand {{
    font-weight: bold;
    font-size: 1.3rem;
}}

/* Forms */
.form-control {{
    border-radius: 8px;
    border: 1px solid #dee2e6;
    padding: 0.75rem;
    transition: all 0.3s ease;
}}

.form-control:focus {{
    border-color: var(--primary-color);
    box-shadow: 0 0 0 0.2rem rgba(0, 102, 204, 0.25);
}}

/* Footer */
footer {{
    margin-top: auto;
}}

/* Animations */
@keyframes fadeInUp {{
    from {{
        opacity: 0;
        transform: translateY(30px);
    }}
    to {{
        opacity: 1;
        transform: translateY(0);
    }}
}}

.fade-in-up {{
    animation: fadeInUp 0.8s ease-out;
}}

/* Stats Cards */
.stats-card {{
    background: linear-gradient(135deg, var(--primary-color), #004a99);
    color: white;
    border-radius: 15px;
}}

/* Table Styling */
.table {{
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
}}

/* Badge Styling */
.badge {{
    font-size: 0.8em;
    padding: 0.5em 0.8em;
    border-radius: 20px;
}}

/* Loading States */
.loading {{
    pointer-events: none;
    opacity: 0.6;
}}

.loading::after {{
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
}}

@keyframes spin {{
    to {{
        transform: rotate(360deg);
    }}
}}

/* Responsive Design */
@media (max-width: 768px) {{
    .hero-section {{
        padding: 2rem 0;
    }}
    
    .hero-section h1 {{
        font-size: 2rem;
    }}
    
    .card {{
        margin-bottom: 1rem;
    }}
}}

/* App-specific styles */
{get_app_specific_css(app_type)}
'''


def get_app_specific_css(app_type: str) -> str:
    """Get app-specific CSS based on application type"""
    styles = {
        'ecommerce': '''
/* E-commerce specific styles */
.product-card {
    transition: all 0.3s ease;
}

.product-card:hover {
    transform: scale(1.05);
}

.price-tag {
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--success-color);
}

.cart-badge {
    position: absolute;
    top: -8px;
    right: -8px;
    background: var(--danger-color);
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
}
''',
        'blog': '''
/* Blog specific styles */
.post-meta {
    color: var(--secondary-color);
    font-size: 0.9rem;
}

.post-excerpt {
    line-height: 1.6;
    color: #666;
}

.comment-box {
    background: var(--light-color);
    border-radius: 10px;
    padding: 1rem;
    margin: 1rem 0;
}

.author-badge {
    background: var(--primary-color);
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 15px;
    font-size: 0.8rem;
}
''',
        'task_manager': '''
/* Task Manager specific styles */
.task-item {
    border-left: 4px solid var(--primary-color);
    transition: all 0.3s ease;
}

.task-item:hover {
    background: var(--light-color);
}

.task-status.pending {
    color: var(--warning-color);
}

.task-status.in_progress {
    color: var(--info-color);
}

.task-status.completed {
    color: var(--success-color);
}

.priority-high {
    border-left-color: var(--danger-color) !important;
}

.priority-medium {
    border-left-color: var(--warning-color) !important;
}

.priority-low {
    border-left-color: var(--success-color) !important;
}
''',
        'general': '''
/* General application styles */
.item-list {
    list-style: none;
    padding: 0;
}

.item-list li {
    background: white;
    margin: 0.5rem 0;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.item-list li:hover {
    transform: translateX(5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.status-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 0.5rem;
}

.status-active {
    background: var(--success-color);
}

.status-inactive {
    background: var(--secondary-color);
}
'''
    }
    return styles.get(app_type, styles['general'])


def generate_main_js() -> str:
    """Generate main JavaScript file"""
    return '''// Main JavaScript functionality for Flask App
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Auto-hide alerts after 5 seconds
    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');
    alerts.forEach(function(alert) {
        setTimeout(function() {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }, 5000);
    });

    // Form validation enhancement
    const forms = document.querySelectorAll('form');
    forms.forEach(function(form) {
        form.addEventListener('submit', function(event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                
                // Focus on first invalid field
                const firstInvalidField = form.querySelector(':invalid');
                if (firstInvalidField) {
                    firstInvalidField.focus();
                }
            }
            form.classList.add('was-validated');
        });
    });

    // AJAX form handling
    const ajaxForms = document.querySelectorAll('[data-ajax="true"]');
    ajaxForms.forEach(function(form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            handleAjaxForm(form);
        });
    });

    // Search functionality
    const searchInputs = document.querySelectorAll('[data-search="true"]');
    searchInputs.forEach(function(input) {
        input.addEventListener('input', debounce(function() {
            performSearch(input.value, input.dataset.target);
        }, 300));
    });

    // Smooth scrolling for anchor links
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                e.preventDefault();
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Loading states for buttons
    const loadingButtons = document.querySelectorAll('[data-loading="true"]');
    loadingButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            showLoadingState(button);
        });
    });

    // Confirmation dialogs
    const confirmButtons = document.querySelectorAll('[data-confirm]');
    confirmButtons.forEach(function(button) {
        button.addEventListener('click', function(event) {
            const message = button.dataset.confirm;
            if (!confirm(message)) {
                event.preventDefault();
                return false;
            }
        });
    });
});

// Helper Functions
function handleAjaxForm(form) {
    const formData = new FormData(form);
    const submitButton = form.querySelector('[type="submit"]');
    
    showLoadingState(submitButton);
    
    fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showAlert('Success!', 'success');
            if (data.redirect) {
                window.location.href = data.redirect;
            }
        } else {
            showAlert(data.error || 'An error occurred', 'danger');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('Network error occurred', 'danger');
    })
    .finally(() => {
        hideLoadingState(submitButton);
    });
}

function showLoadingState(button) {
    if (button) {
        button.disabled = true;
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
        button.dataset.originalText = originalText;
    }
}

function hideLoadingState(button) {
    if (button && button.dataset.originalText) {
        button.disabled = false;
        button.innerHTML = button.dataset.originalText;
        delete button.dataset.originalText;
    }
}

function showAlert(message, type = 'info') {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    const container = document.querySelector('.container') || document.body;
    const alertDiv = document.createElement('div');
    alertDiv.innerHTML = alertHtml;
    
    container.insertBefore(alertDiv.firstElementChild, container.firstElementChild);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        const alert = container.querySelector('.alert');
        if (alert) {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }
    }, 5000);
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function performSearch(query, target) {
    if (!query.trim()) return;
    
    // Basic search implementation
    const items = document.querySelectorAll(target || '[data-searchable]');
    const searchTerm = query.toLowerCase();
    
    items.forEach(item => {
        const text = item.textContent.toLowerCase();
        const isVisible = text.includes(searchTerm);
        item.style.display = isVisible ? '' : 'none';
    });
}

// API Helper Functions
const API = {
    get: function(url) {
        return fetch(url, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            }
        }).then(response => response.json());
    },
    
    post: function(url, data) {
        return fetch(url, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        }).then(response => response.json());
    },
    
    delete: function(url) {
        return fetch(url, {
            method: 'DELETE',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        }).then(response => response.json());
    }
};

// Utility functions
const Utils = {
    formatDate: function(date) {
        return new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(new Date(date));
    },
    
    formatCurrency: function(amount, currency = 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency
        }).format(amount);
    },
    
    copyToClipboard: function(text) {
        navigator.clipboard.writeText(text).then(() => {
            showAlert('Copied to clipboard!', 'success');
        }).catch(() => {
            showAlert('Failed to copy to clipboard', 'danger');
        });
    }
};

// Export for use in other scripts
window.FlaskApp = {
    API,
    Utils,
    showAlert,
    showLoadingState,
    hideLoadingState
};
'''


def generate_api_routes(app_type: str, prompt: str) -> str:
    """Generate API routes blueprint"""
    return f'''from flask import Blueprint, jsonify, request
from flask_login import login_required, current_user
from models import db, {get_main_model_class(app_type)}

api_bp = Blueprint('api', __name__)

{get_api_routes_for_type(app_type)}

@api_bp.errorhandler(404)
def api_not_found(error):
    return jsonify({{'error': 'Resource not found'}}), 404

@api_bp.errorhandler(400)
def api_bad_request(error):
    return jsonify({{'error': 'Bad request'}}), 400

@api_bp.errorhandler(500)
def api_internal_error(error):
    return jsonify({{'error': 'Internal server error'}}), 500
'''


def get_api_routes_for_type(app_type: str) -> str:
    """Get API routes based on application type"""
    routes = {
        'ecommerce': '''
@api_bp.route('/products', methods=['GET'])
def get_products():
    """Get all products"""
    products = Product.query.all()
    return jsonify([{
        'id': p.id,
        'name': p.name,
        'price': p.price,
        'stock': p.stock,
        'description': p.description,
        'category_id': p.category_id
    } for p in products])

@api_bp.route('/products/<int:id>', methods=['GET'])
def get_product(id):
    """Get single product"""
    product = Product.query.get_or_404(id)
    return jsonify({
        'id': product.id,
        'name': product.name,
        'price': product.price,
        'stock': product.stock,
        'description': product.description,
        'category_id': product.category_id
    })

@api_bp.route('/cart', methods=['GET'])
@login_required
def get_cart():
    """Get user's cart"""
    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    return jsonify([{
        'id': item.id,
        'product_id': item.product_id,
        'quantity': item.quantity,
        'product_name': item.product.name,
        'product_price': item.product.price
    } for item in cart_items])

@api_bp.route('/cart', methods=['POST'])
@login_required
def add_to_cart():
    """Add item to cart"""
    data = request.get_json()
    product_id = data.get('product_id')
    quantity = data.get('quantity', 1)
    
    # Check if product exists
    product = Product.query.get_or_404(product_id)
    
    # Check if item already in cart
    existing_item = CartItem.query.filter_by(
        user_id=current_user.id,
        product_id=product_id
    ).first()
    
    if existing_item:
        existing_item.quantity += quantity
    else:
        new_item = CartItem(
            user_id=current_user.id,
            product_id=product_id,
            quantity=quantity
        )
        db.session.add(new_item)
    
    db.session.commit()
    return jsonify({'success': True, 'message': 'Item added to cart'})
''',
        'blog': '''
@api_bp.route('/posts', methods=['GET'])
def get_posts():
    """Get all published posts"""
    posts = Post.query.filter_by(published=True).order_by(Post.created_at.desc()).all()
    return jsonify([{
        'id': p.id,
        'title': p.title,
        'content': p.content,
        'summary': p.summary,
        'author': p.author.username,
        'created_at': p.created_at.isoformat()
    } for p in posts])

@api_bp.route('/posts/<int:id>', methods=['GET'])
def get_post(id):
    """Get single post with comments"""
    post = Post.query.get_or_404(id)
    comments = Comment.query.filter_by(post_id=id).all()
    
    return jsonify({
        'id': post.id,
        'title': post.title,
        'content': post.content,
        'summary': post.summary,
        'author': post.author.username,
        'created_at': post.created_at.isoformat(),
        'comments': [{
            'id': c.id,
            'content': c.content,
            'author': c.author.username,
            'created_at': c.created_at.isoformat()
        } for c in comments]
    })

@api_bp.route('/posts/<int:post_id>/comments', methods=['POST'])
@login_required
def add_comment(post_id):
    """Add comment to post"""
    data = request.get_json()
    content = data.get('content')
    
    if not content:
        return jsonify({'error': 'Content is required'}), 400
    
    comment = Comment(
        content=content,
        author_id=current_user.id,
        post_id=post_id
    )
    
    db.session.add(comment)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'comment': {
            'id': comment.id,
            'content': comment.content,
            'author': comment.author.username,
            'created_at': comment.created_at.isoformat()
        }
    })
''',
        'task_manager': '''
@api_bp.route('/tasks', methods=['GET'])
@login_required
def get_tasks():
    """Get user's tasks"""
    status = request.args.get('status')
    query = Task.query.filter_by(assigned_to_id=current_user.id)
    
    if status:
        query = query.filter_by(status=status)
    
    tasks = query.all()
    
    return jsonify([{
        'id': t.id,
        'title': t.title,
        'description': t.description,
        'status': t.status,
        'priority': t.priority,
        'created_at': t.created_at.isoformat(),
        'due_date': t.due_date.isoformat() if t.due_date else None
    } for t in tasks])

@api_bp.route('/tasks', methods=['POST'])
@login_required
def create_task():
    """Create new task"""
    data = request.get_json()
    
    task = Task(
        title=data.get('title'),
        description=data.get('description'),
        status=data.get('status', 'pending'),
        priority=data.get('priority', 'medium'),
        assigned_to_id=current_user.id
    )
    
    db.session.add(task)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'task': {
            'id': task.id,
            'title': task.title,
            'description': task.description,
            'status': task.status,
            'priority': task.priority
        }
    }), 201

@api_bp.route('/tasks/<int:id>', methods=['PUT'])
@login_required
def update_task(id):
    """Update task"""
    task = Task.query.filter_by(id=id, assigned_to_id=current_user.id).first_or_404()
    data = request.get_json()
    
    task.title = data.get('title', task.title)
    task.description = data.get('description', task.description)
    task.status = data.get('status', task.status)
    task.priority = data.get('priority', task.priority)
    
    db.session.commit()
    
    return jsonify({'success': True, 'message': 'Task updated'})
''',
        'general': '''
@api_bp.route('/items', methods=['GET'])
@login_required
def get_items():
    """Get user's items"""
    items = Item.query.filter_by(user_id=current_user.id).all()
    return jsonify([{
        'id': i.id,
        'title': i.title,
        'description': i.description,
        'status': i.status,
        'created_at': i.created_at.isoformat()
    } for i in items])

@api_bp.route('/items', methods=['POST'])
@login_required
def create_item():
    """Create new item"""
    data = request.get_json()
    
    item = Item(
        title=data.get('title'),
        description=data.get('description'),
        status=data.get('status', 'active'),
        user_id=current_user.id
    )
    
    db.session.add(item)
    db.session.commit()
    
    return jsonify({
        'success': True,
        'item': {
            'id': item.id,
            'title': item.title,
            'description': item.description,
            'status': item.status
        }
    }), 201

@api_bp.route('/items/<int:id>', methods=['DELETE'])
@login_required
def delete_item(id):
    """Delete item"""
    item = Item.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(item)
    db.session.commit()
    return jsonify({'success': True, 'message': 'Item deleted'})
'''
    }
    return routes.get(app_type, routes['general'])


def generate_init_db() -> str:
    """Generate database initialization script"""
    return '''#!/usr/bin/env python3
"""
Database initialization script
Run this to set up your database with sample data
"""

from app import app, db
from models import User, *
from werkzeug.security import generate_password_hash

def init_database():
    """Initialize the database with sample data"""
    with app.app_context():
        # Create all tables
        db.create_all()
        print("✅ Database tables created")
        
        # Check if admin user exists
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            # Create admin user
            admin = User(
                username='admin',
                email='admin@example.com',
                password_hash=generate_password_hash('admin123'),
                is_admin=True
            )
            db.session.add(admin)
            print("✅ Admin user created (admin/admin123)")
        
        # Create sample user
        user = User.query.filter_by(username='demo').first()
        if not user:
            user = User(
                username='demo',
                email='demo@example.com',
                password_hash=generate_password_hash('demo123')
            )
            db.session.add(user)
            print("✅ Demo user created (demo/demo123)")
        
        db.session.commit()
        
        # Add sample data based on app type
        add_sample_data(admin, user)
        
        print("🎉 Database initialization complete!")
        print("\\n📝 Login credentials:")
        print("   Admin: admin / admin123")
        print("   Demo:  demo / demo123")

def add_sample_data(admin_user, demo_user):
    """Add sample data specific to the application"""
    # This will be customized based on the app type during generation
    pass

if __name__ == '__main__':
    init_database()
'''


def generate_requirements() -> str:
    """Generate requirements.txt file"""
    return '''Flask==2.3.3
Flask-SQLAlchemy==3.0.5
Flask-Login==0.6.3
Flask-WTF==1.2.1
WTForms==3.1.0
Werkzeug==2.3.7
python-dotenv==1.0.0
email-validator==2.1.0
gunicorn==21.2.0
'''


def generate_env_example() -> str:
    """Generate .env.example file"""
    return '''# Flask Configuration
SECRET_KEY=your-secret-key-here
FLASK_ENV=development
FLASK_DEBUG=1

# Database Configuration
DATABASE_URL=sqlite:///app.db

# Email Configuration (Optional)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=1
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password

# External APIs (if needed)
# API_KEY=your-api-key-here
'''


def generate_run_script() -> str:
    """Generate run.py script"""
    return '''#!/usr/bin/env python3
"""
Development server runner
Usage: python run.py
"""

from app import app
from models import db

if __name__ == '__main__':
    with app.app_context():
        # Create tables if they don't exist
        db.create_all()
    
    # Run the development server
    app.run(
        debug=True,
        host='0.0.0.0',
        port=5000
    )
'''


def generate_readme(project_name: str, app_type: str) -> str:
    """Generate comprehensive README file"""
    return f'''# {project_name}

A modern Flask web application generated by AI Website Generator.

## 🚀 Features

{get_feature_list(app_type)}

## 📋 Requirements

- Python 3.7+
- pip (Python package manager)
- SQLite (included with Python)

## ⚙️ Installation & Setup

### 1. Extract and Navigate
```bash
# Extract the project files
unzip your-project.zip
cd your-project-folder
```

### 2. Create Virtual Environment
```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# On Windows:
venv\\Scripts\\activate
# On macOS/Linux:
source venv/bin/activate
```

### 3. Install Dependencies
```bash
pip install -r requirements.txt
```

### 4. Environment Configuration
```bash
# Copy environment template
cp .env.example .env

# Edit .env with your settings (optional for development)
# The app will work with default settings
```

### 5. Initialize Database
```bash
# Set up database with sample data
python init_db.py
```

### 6. Run the Application
```bash
# Start development server
python run.py

# Or use Flask's built-in server
python app.py
```

The application will be available at: **http://localhost:5000**

## 👥 Default Login Credentials

After running `init_db.py`, you can log in with:

- **Admin User**: `admin` / `admin123`
- **Demo User**: `demo` / `demo123`

## 📁 Project Structure

```
{project_name.lower().replace(' ', '_')}/
├── app.py              # Main Flask application
├── config.py           # Configuration settings
├── models.py           # Database models
├── routes.py           # URL routes and views
├── forms.py            # WTForms form definitions
├── api.py              # REST API endpoints
├── init_db.py          # Database initialization
├── run.py              # Development server runner
├── requirements.txt    # Python dependencies
├── .env.example        # Environment variables template
├── README.md           # This file
├── templates/          # HTML templates
│   ├── base.html       # Base template
│   ├── index.html      # Home page
│   ├── dashboard.html  # User dashboard
│   └── auth/          # Authentication templates
├── static/            # Static files
│   ├── css/          # Stylesheets
│   └── js/           # JavaScript files
└── uploads/          # File upload directory
```

## 🔧 Configuration

### Environment Variables

Create a `.env` file based on `.env.example`:

```env
SECRET_KEY=your-secret-key-here
FLASK_ENV=development
DATABASE_URL=sqlite:///app.db
```

### Database Configuration

The app uses SQLite by default, which is perfect for development and small applications. For production, you can easily switch to PostgreSQL or MySQL by changing the `DATABASE_URL`.

## 📚 API Endpoints

{get_api_documentation(app_type)}

## 🎨 Customization

### Adding New Features

1. **Database Models**: Add new models in `models.py`
2. **Routes**: Create new routes in `routes.py`
3. **Templates**: Add HTML templates in `templates/`
4. **Static Files**: Add CSS/JS in `static/`

### Styling

The app uses Bootstrap 5 for responsive design. Customize the look by editing `static/css/style.css`.

## 🚀 Production Deployment

### Using Gunicorn

```bash
# Install gunicorn (included in requirements.txt)
pip install gunicorn

# Run with gunicorn
gunicorn -w 4 -b 0.0.0.0:8000 app:app
```

### Environment Setup for Production

```bash
export FLASK_ENV=production
export SECRET_KEY=your-production-secret-key
export DATABASE_URL=your-production-database-url
```

### Docker Deployment (Optional)

Create a `Dockerfile`:

```dockerfile
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .
EXPOSE 5000

CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "app:app"]
```

## 🔒 Security Notes

- Change the `SECRET_KEY` in production
- Use environment variables for sensitive data
- Enable HTTPS in production
- Regular security updates for dependencies

## 🐛 Troubleshooting

### Common Issues

1. **Import Errors**: Make sure virtual environment is activated
2. **Database Errors**: Run `python init_db.py` to initialize
3. **Port Already in Use**: Change port in `run.py` or kill existing process

### Getting Help

- Check the Flask documentation: https://flask.palletsprojects.com/
- Review error logs in the terminal
- Ensure all dependencies are installed

## 📄 License

This project was generated by AI Website Generator. You are free to use, modify, and distribute this code for any purpose.

## 🤝 Contributing

This is a generated project, but you can:
- Customize it for your needs
- Add new features
- Improve the design
- Share your improvements

---

**Built with ❤️ using Flask and AI Website Generator**

*Generated on: {get_current_date()}*
'''


def get_feature_list(app_type: str) -> str:
    """Get feature list based on application type"""
    features = {
        'ecommerce': '''- 🛒 Product catalog and management
- 🛍️ Shopping cart functionality
- 👤 User authentication and profiles
- 📊 Admin dashboard
- 🔍 Product search and filtering
- 📱 Mobile-responsive design
- 🔒 Secure user sessions
- 📧 Email notifications (configurable)''',
        'blog': '''- 📝 Create and manage blog posts
- 💬 Comment system
- 👤 User authentication
- 📊 Author dashboard
- 🔍 Content search
- 📱 Mobile-responsive design
- 🏷️ Content categorization
- 📧 Email notifications (configurable)''',
        'task_manager': '''- ✅ Task creation and management
- 📋 Project organization
- 👥 Task assignment
- 📊 Progress tracking
- 🎯 Priority levels
- 📅 Due date management
- 📱 Mobile-responsive design
- 📈 Productivity analytics''',
        'general': '''- 👤 User authentication and profiles
- 📊 Interactive dashboard
- 📱 Mobile-responsive design
- 🔍 Search functionality
- 🔒 Secure sessions
- 📧 Email notifications (configurable)
- 🎨 Modern UI/UX
- 📈 Data visualization'''
    }
    return features.get(app_type, features['general'])


def get_api_documentation(app_type: str) -> str:
    """Get API documentation based on application type"""
    docs = {
        'ecommerce': '''### Products
- `GET /api/products` - Get all products
- `GET /api/products/<id>` - Get specific product

### Cart
- `GET /api/cart` - Get user's cart items
- `POST /api/cart` - Add item to cart

### Authentication Required
All cart endpoints require user authentication.''',
        'blog': '''### Posts
- `GET /api/posts` - Get all published posts
- `GET /api/posts/<id>` - Get specific post with comments
- `POST /api/posts/<id>/comments` - Add comment (auth required)

### Authentication
- Most read operations are public
- Creating comments requires authentication''',
        'task_manager': '''### Tasks
- `GET /api/tasks` - Get user's tasks (auth required)
- `POST /api/tasks` - Create new task (auth required)
- `PUT /api/tasks/<id>` - Update task (auth required)

### Projects
- Task management includes project organization
- All endpoints require authentication''',
        'general': '''### Items
- `GET /api/items` - Get user's items (auth required)
- `POST /api/items` - Create new item (auth required)
- `DELETE /api/items/<id>` - Delete item (auth required)

### Authentication
All API endpoints require user authentication.'''
    }
    return docs.get(app_type, docs['general'])


def get_current_date() -> str:
    """Get current date formatted"""
    from datetime import datetime
    return datetime.now().strftime('%Y-%m-%d')